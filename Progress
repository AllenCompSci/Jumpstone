5/5/2017
/*
Peter Cardenas, Alex Huang, and Adity
Computer Science I
Start: 4..2017
End: ..2017
Jumpstone: Hearthstone with Mario Characters
*/
#include <iostream>
#include <string>
#include <graphics.h>
#include <ctime>
#include <winbgi.cpp>
#include <string>
#include <Windows.h>
#include <cmath>
using namespace std;
void gr_Start(int &GrDriver, int&GrMode, int&ErrorCode);
string setName(int ID);
int setAttack(int ID);
int setDefense(int ID);
int setManaCost(int ID);
void ability(int ID);
void playCard(int ID);
void drawCard();
void render(int ID);
void attackMinion(UserBoard minion1, OpponentBoard minion2);
void attackCharacter(Player hero, UserBoard minion1 = uC1, OpponentBoard minion2 = oC1);
void mulligan();
void drawBoard();
struct UserBoard {
	int ID;
	int attack;
	int defense;
	bool isInPlay;
	bool isAttacking;
	void setIsAttacking(bool isAttacking) {
		this->isAttacking = isAttacking;
	}
	void setIsInPlay(bool isInPlay) {
		this->isInPlay = isInPlay;
	}
	void setID(int ID) {
		this->ID = ID;
	}
	void setAttack(int attack) {
		this->attack = attack;
	}
	void setDefense(int defense) {
		this->defense = defense;
	}
}uC1, uC2, uC3, uC4, uC5, uC6, uC7;
struct OpponentBoard {
	int ID;
	int attack;
	int defense;
	bool isInPlay;
	bool isAttacking;
	void setIsAttacking(bool isAttacking) {
		this->isAttacking = isAttacking;
	}
	void setIsInPlay(bool isInPlay) {
		this->isInPlay = isInPlay;
	}
	void setID(int ID) {
		this->ID = ID;
	}
	void setAttack(int attack) {
		this->attack = attack;
	}
	void setDefense(int defense) {
		this->defense = defense;
	}
}oC1, oC2, oC3, oC4, oC5, oC6, oC7;
struct Player {
	int health = 30;
	int Deck[30];
	int Hand[7];
	int decideF;
	bool isF;
	int turn = 0;
	int setMana(int turn) {
		int mana = (turn / 2) + (turn % 2);
		return mana;
	}
	void isFirst() {
		decideF = rand() % 2 + 1;
		if (decideF == 1) {
			bool isF = true;
		}
		else {
			bool isF = false;
		}
	}
	void createDeck() {
		bool isDup[65];
		for (int i = 0; i < 65; i++) {
			isDup[i] = false;
		}
		Deck[0] = 3;
		Deck[1] = 4;
		Deck[2] = 5;
		Deck[3] = 8;
		Deck[4] = 11;
		Deck[5] = 16;
		Deck[6] = 20;
		Deck[7] = 28;
		Deck[8] = 34;
		Deck[9] = 41;
		Deck[10] = 42;
		Deck[11] = 43;
		Deck[12] = 53;
		Deck[13] = 55;
		Deck[14] = 58;
		for (int i = 15; i < 30; i++) {
			Deck[i] = rand() % 65 + 1;
			for (int j = 0; j < i; j++) {
				if (isDup[Deck[i]] == true) {
					j = i;
					i--;
				}
				else if (Deck[i] == Deck[j]) {
					isDup[Deck[i]] = true;
				}
			}
		}
	}
	void resetHand(int hand[]) {
		int handSize = sizeof(Hand) / sizeof(Hand[0]);
		for (int i = 0; i < handSize; i++) {
			if (hand[i] == -1) {
				for (int j = i; j < handSize; j++) {
					if (j == handSize - 1) {}
					else {
						hand[j] = hand[j + 1];
					}
				}
			}
		}
	}
	int cardsInHand(int Hand[]) {
		int handSize = sizeof(Hand) / sizeof(Hand[0]);
		int count = 0;
		for (int i = 0; i < handSize; i ++) {
			if (Hand[i] > 0) {
				count++;
			}
		}
		return count;
	}
	void isDrawn(int ID) {
		Deck[ID] = -1;
	}
}Opponent,User;
void main() {
	srand((unsigned int)time(NULL));
	system("pause");
	return;
}
void drawBoard() {
	//rect 1: full rectangle
	int top1 = 0;
	int left1 = 0;
	int right1 = 1919;
	int bottom1 = 1017;
	setcolor(WHITE);
	bar(top1, left1, right1, bottom1);
	setcolor(BLACK);
	//rect 2: middle of board
	int top2 = 0;
	int left2 = 289;
	int right2 = 1919;
	int bottom2 = 728;
	rectangle(top2, left2, right2, bottom2);
	setcolor(RED);

	//ellipse idek anymore: end turn button
	int X = 1859;
	int Y = 509;
	int Xr = 60;
	int Yr = 40;
	ellipse(X, Y, 0, 360, 62, 42);

	ellipse(X, Y, 0, 360, Xr, Yr);

	fillellipse(X, Y, Xr, Yr);

	setcolor(0);
	// add asthetics to rect 2

	//rect 3: player 1/2 board
	int t3 = 0;
	int l3 = 0;
	int r3 = 1919;
	int b3 = 289;
	rectangle(t3, l3, r3, b3);

	//rect 4: player 1/2 board
	int t4 = 0;
	int l4 = 728;
	int r4 = 1919;
	int b4 = 1017;
	rectangle(t4, l4, r4, b4);

	//rect 5: hand
	int l5 = 36;
	int t5 = 30;
	int r5 = 228;
	int b5 = 276;
	rectangle(l5, t5, r5, b5);
	rectangle(l5 + 1, t5 + 1, r5 + 1, b5 + 1);
	rectangle(l5 + 2, t5 + 2, r5 + 2, b5 + 2);

	//rect 6: hand
	rectangle(l5 + 228, t5, r5 + 228, b5);
	rectangle(l5 + 229, t5 + 1, r5 + 229, b5 + 1);
	rectangle(l5 + 230, t5 + 2, r5 + 230, b5 + 2);

	//rect 7: hand
	rectangle(l5 + 456, t5, r5 + 456, b5);
	rectangle(l5 + 457, t5 + 1, r5 + 457, b5 + 1);
	rectangle(l5 + 458, t5 + 2, r5 + 459, b5 + 2);

	//rect 8: hand
	rectangle(l5 + 684, t5, r5 + 684, b5);
	rectangle(l5 + 685, t5 + 1, r5 + 685, b5 + 1);
	rectangle(l5 + 686, t5 + 2, r5 + 686, b5 + 2);

	//rect 9: hand
	rectangle(l5 + 912, t5, r5 + 912, b5);
	rectangle(l5 + 913, t5 + 1, r5 + 913, b5 + 1);
	rectangle(l5 + 914, t5 + 2, r5 + 914, b5 + 2);

	//rect 10: hand
	rectangle(l5 + 1140, t5, r5 + 1140, b5);
	rectangle(l5 + 1141, t5 + 1, r5 + 1141, b5 + 1);
	rectangle(l5 + 1142, t5 + 2, r5 + 1142, b5 + 2);

	//rect 11: hand
	rectangle(l5 + 1368, t5, r5 + 1368, b5);
	rectangle(l5 + 1369, t5 + 1, r5 + 1369, b5 + 1);
	rectangle(l5 + 1370, t5 + 2, r5 + 1370, b5 + 2);

	//rect 18: Hand
	int l18 = 36;
	int t18 = 738;
	int r18 = 228;
	int b18 = 997;
	rectangle(l18, t18, r18, b18);
	rectangle(l18 + 1, t18 + 1, r18 + 1, b18 + 1);
	rectangle(l18 + 2, t18 + 2, r18 + 2, b18 + 2);
	//rect 19: hand
	rectangle(l18 + 228, t18, r18 + 228, b18);
	rectangle(l18 + 229, t18 + 1, r18 + 229, b18 + 1);
	rectangle(l18 + 230, t18 + 2, r18 + 230, b18 + 2);

	//rect 20: hand
	rectangle(l18 + 456, t18, r18 + 456, b18);
	rectangle(l18 + 457, t18 + 1, r18 + 457, b18 + 1);
	rectangle(l18 + 458, t18 + 2, r18 + 458, b18 + 2);

	//rect 21: hand
	rectangle(l18 + 684, t18, r18 + 684, b18);
	rectangle(l18 + 685, t18 + 1, r18 + 685, b18 + 1);
	rectangle(l18 + 686, t18 + 2, r18 + 686, b18 + 2);

	//rect 22: hand
	rectangle(l18 + 912, t18, r18 + 912, b18);
	rectangle(l18 + 913, t18 + 1, r18 + 913, b18 + 1);
	rectangle(l18 + 914, t18 + 2, r18 + 914, b18 + 1);

	//rect 23: hand
	rectangle(l18 + 1140, t18, r18 + 1140, b18);
	rectangle(l18 + 1141, t18 + 1, r18 + 1141, b18 + 1);
	rectangle(l18 + 1142, t18 + 2, r18 + 1142, b18 + 2);

	//rect 24: hand 
	rectangle(l18 + 1368, t18, r18 + 1368, b18);
	rectangle(l18 + 1369, t18 + 1, r18 + 1369, b18 + 1);
	rectangle(l18 + 1370, t18 + 2, r18 + 1370, b18 + 2);
}
string setName(int ID) {
	string names[84] = { "Micro Goomba","Block", "Goomba", "Shy Guy", "Toad", "Bill Blaster", "Fuzzy", "Luma", "Rocky Wrench", "Cheep Cheep", "Green Koopa", "Paragoomba", "Pipe Piranha Plant", 
		"Toadsworth", "Yoshi Egg", "Boo", "Bowser Jr.", "Bowser Statue", "Koopatrol", "Magikoopa", "Pokey", "Red Koopa", "Wiggler", "Boomerang Bro", "Captain Toad", "Dry Bones", "Fawful", 
		"Goomba Tower", "Hammer Bro", "Lakitu", "Sledge Bro", "Toadette", "Cataquack", "Fire Bro",	"Antasma", "Goomba King", "Dry Bowser", "Honey Queen", "King Boo", "Fire Flower", "Hammer", 
		"Super Mushroom", "1-up Mushroom", "Fused Bomb-omb", "Lightning", "Mario's Cap", "Super Star", "Whomp Plomp", "Castle",	"Dr. Mario Pills", "F.L.U.D.D.", "Metal Cap", "POW Block", 
		"Wario's Bike", "? Block", "Damsel In Distress", "Thwomp Stomp",	"Blue Shell", "Fuzzy Madness", "Gotta Go Fast!", "Haunted Mansion", "Koopalings' Mischief",	"Mega Mushroom", "Lava Pool", 
		"Wassup Bro!", "Coin", "Ball", "Bat", "Bullet Bill", "Lava Bubble", "Ring", "Spiny", "Green Shell", "Iggy", "Larry Koopa", "Lemmy Koopa", "Ludwig von Koopa", "Morton", "Roy Koopa", "War Toad", 
		"Wendy O. Koopa", "Red Shell", "Sonic", "Yoshi"};
	return names[ID - 1];
}
int setAttack(int ID) {
	int attackVals[84] = { 1, 0, 2, 1, 1, 0, 2, 1, 1, 4, 2, 2, 1, 3, 0, 5, 4, 1, 3, 3, 3, 3, 2, 5, 3, 2, 5, 5, 4, 3, 9, 4, 5, 6, 3, 6, 3, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
		-1,	-1,	-1,	-1, -1,	-1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 2, 2, 1, 1, -1, 2, 2, 1, 1, 2, 2, 3, 1, -1, 6, 3 };
	return attackVals[ID - 1];
}
int setDefense(int ID) {
	int defenseVals[84] = { 1, 4, 2, 2, 3, 5, 2, 2, 2, 2, 2, 4, 5, 3, 3, 3, 3, 7, 5, 4, 3, 4, 5, 5, 4, 1, 4, 5, 5, 5, 7, 5, 3, 5, 7, 6, 15, 8, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,	1, 1, 1, 1, 1, 1, -1, 2, 3, 2, 2, 3, 2, 1, 3, -1, 2, 4 };
	return defenseVals[ID - 1];
}
int setManaCost(int ID) {
	int costVals[84] = { 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 7, 7, 8, 8, 8, 1, 1, 2, 2, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 5, 5, 
		6, 6, 6, 6, 8, 10, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4 };
	return costVals[ID - 1];
}
void ability(int ID) {
	
}
void playCard(int ID){
	if (!uC1.isInPlay) {
		uC1.setID(ID);
		uC1.setAttack(setAttack(ID));
		uC1.setDefense(setDefense(ID));
		uC1.isInPlay = true;
	}
	else if (!uC2.isInPlay) {
		uC2.setID(ID);
		uC2.setAttack(setAttack(ID));
		uC2.setDefense(setDefense(ID));
		uC2.isInPlay = true;
	}
	else if (!uC3.isInPlay) {
		uC3.setID(ID);
		uC3.setAttack(setAttack(ID));
		uC3.setDefense(setDefense(ID));
		uC3.isInPlay = true;
	}
	else if (!uC4.isInPlay) {
		uC4.setID(ID);
		uC4.setAttack(setAttack(ID));
		uC4.setDefense(setDefense(ID));
		uC4.isInPlay = true;
	}
	else if (!uC5.isInPlay) {
		uC5.setID(ID);
		uC5.setAttack(setAttack(ID));
		uC5.setDefense(setDefense(ID));
		uC5.isInPlay = true;
	}
	else if (!uC6.isInPlay) {
		uC6.setID(ID);
		uC6.setAttack(setAttack(ID));
		uC6.setDefense(setDefense(ID));
		uC6.isInPlay = true;
	}
	else if (!uC7.isInPlay) {
		uC7.setID(ID);
		uC7.setAttack(setAttack(ID));
		uC7.setDefense(setDefense(ID));
		uC7.isInPlay = true;
	}
	else {
		//cannot play any minions
	}
}
void drawCard() {
	
}
void gameStart() {
	
}
void matchStart() {
	Opponent.createDeck();
	User.createDeck();
	mulligan();
}
void decideFOS() {
	User.isFirst();
	if (User.isF) {
		Opponent.isF = false;
		User.turn = 1;
	}
	else {
		Opponent.isF = true;
		Opponent.turn = 1;
	}
}
void mulligan() {
	//three cards each player, second player gets 2 coins
	decideFOS();
	int choice;
	int deckSize = sizeof(User.Deck) / sizeof(User.Deck[0]);
	bool clickedRegion1;
	bool clickedRegion2;
	bool clickedRegion3;
	bool mDone;
	if (User.isF) {
		for (int i = 0; i < 3; i++) {
			choice = rand() % deckSize;
			User.Hand[i] = User.Deck[choice];
			User.isDrawn(choice);
			choice = rand() % deckSize;
			Opponent.Hand[i] = Opponent.Deck[choice];
			Opponent.isDrawn(choice);
		}
		Opponent.Hand[3], Opponent.Hand[4] = 66;
	}
	else if(Opponent.isF) {
		for (int i = 0; i < 3; i++) {
			choice = rand() % deckSize;
			User.Hand[i] = User.Deck[choice];
			User.isDrawn(choice);
			choice = rand() % deckSize;
			Opponent.Hand[i] = Opponent.Deck[choice];
			Opponent.isDrawn(choice);
		}
		User.Hand[3], User.Hand[4] = 66;
	}
	if (mDone) {
		if (clickedRegion1) {
			while(User.Hand[0] != -1) {
				int i = 0;
				if (User.Deck[i] = -1) {
					User.Deck[i] = User.Hand[0];
					User.Hand[0] = -1;
				}
				i++;
			}
			if (clickedRegion2) {
				while (User.Hand[1] != -1) {
					int i = 0;
					if (User.Deck[i] = -1) {
						User.Deck[i] = User.Hand[1];
						User.Hand[1] = -1;
					}
					i++;
				}
				if (clickedRegion3) {
					while (User.Hand[2] != -1) {
						int i = 0;
						if (User.Deck[i] = -1) {
							User.Deck[i] = User.Hand[2];
							User.Hand[2] = -1;
						}
						i++;
					}
				}
			}
			else if (clickedRegion3) {
				while (User.Hand[2] != -1) {
					int i = 0;
					if (User.Deck[i] = -1) {
						User.Deck[i] = User.Hand[2];
						User.Hand[2] = -1;
					}
					i++;
				}
			}
		}
		else if (clickedRegion2) {
			while (User.Hand[1] != -1) {
				int i = 0;
				if (User.Deck[i] = -1) {
					User.Deck[i] = User.Hand[1];
					User.Hand[1] = -1;
				}
				i++;
			}
			if (clickedRegion3) {
				while (User.Hand[2] != -1) {
					int i = 0;
					if (User.Deck[i] = -1) {
						User.Deck[i] = User.Hand[2];
						User.Hand[2] = -1;
					}
					i++;
				}
			}
		}
		else if (clickedRegion3) {
			while (User.Hand[2] != -1) {
				int i = 0;
				if (User.Deck[i] = -1) {
					User.Deck[i] = User.Hand[2];
					User.Hand[2] = -1;
				}
				i++;
			}
		}
		for (int i = 0; i < 3; i++) {
			if (User.Hand[i] == -1) {
				choice = rand() % deckSize;
				User.Hand[i] = User.Deck[choice];
				User.isDrawn(choice);
			}
		}
	}
}
void turn() {
	drawCard();
	
}
void render(int ID) {

}
void attackCharacter(Player hero, UserBoard minion1 = uC1, OpponentBoard minion2 = oC1) {
	if (minion1.isAttacking) {
		hero.health -= minion1.attack;
		minion1.setIsAttacking(false);
	}
	if (minion2.isAttacking) {
		hero.health -= minion2.attack;
		minion2.setIsAttacking(false);
	}
}
void attackMinion(UserBoard minion1, OpponentBoard minion2){
	//hero attack is 0
	if (minion1.isAttacking) {
		minion1.setDefense(minion1.defense - minion2.attack);
		minion2.setDefense(minion2.defense - minion1.attack);
		minion1.setIsAttacking(false);
	}
	else {
		minion1.setDefense(minion1.defense - minion2.attack);
		minion2.setDefense(minion2.defense - minion1.attack);
		minion2.setIsAttacking(false);
	}
}
void gr_Start(int &GrDriver, int&GrMode, int&ErrorCode) {
	//set the graphics driver
	GrDriver = VGA; //800x600 by monitor
	GrMode = VGAMAX;//set graphics mode
	initgraph(&GrDriver, &GrMode, "");//start graphics
									  //check for problems
	ErrorCode = graphresult();
	if (ErrorCode != grOk)
	{
		cout << "Error:" << ErrorCode;
	}
}
