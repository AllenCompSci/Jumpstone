4/25/17
/*
Peter Cardenas, Alex Huang, and Adity
Computer Science I
Start: 4..2017
End: ..2017
Jumpstone: Hearthstone with Mario Characters
*/
#include <iostream>
#include <string>
#include <graphics.h>
#include <ctime>
#include <winbgi.cpp>
#include <string>
#include <Windows.h>
#include <cmath>
using namespace std;
void gr_Start(int &GrDriver, int&GrMode, int&ErrorCode);
void stats(int ID);
void setRarity(int ID);
void setName(int ID);
void setAttack(int ID);
void setDefense(int ID);
void setManaCost(int ID);
void ability(int ID);
void playCard(int ID);
void drawCard();
void render(int ID);
void attacking(int attackerID, int attackeeID);
struct Deck {
	int ID[30];
	void createDeck() {
		bool isDup[66];
		for (int i = 0; i < 66; i++) {
			isDup[i] = false;
		}
		ID[0] = 3;
		ID[1] = 5;
		ID[2] = 8;
		ID[3] = 11;
		ID[4] = 16;
		ID[5] = 29;
		ID[6] = 35;
		ID[7] = 43;
		ID[8] = 54;
		ID[9] = 59;
		ID[10] = 20;
		ID[11] = 4;
		ID[12] = 42;
		ID[13] = 44;
		ID[14] = 56;
		for (int i = 15; i < 30; i++) {
			ID[i] = rand() % 66 + 1;
			for (int j = 0; j < i; j++) {
				if (isDup[ID[i]] == true) {
					j = i;
					i--;
				}
				else if (ID[i] == ID[j]) {
					isDup[ID[i]] = true;
				}
			}
		}
	}
}OpponentDeck,UserDeck;
void main() {
	srand((unsigned int)time(NULL));
	system("pause");
	return;
}
void stats(int ID) {
	setAttack(ID);
	setDefense(ID);
	setManaCost(ID);
	setName(ID);
}
void setRarity(int ID) {

}
void setName(int ID) {

}
void setAttack(int ID) {

}
void setDefense(int ID) {

}
void setManaCost(int ID) {

}
void ability(int ID) {

}
void playCard(int ID){
	stats(ID);
	render(ID);
}
void drawCard() {
	
}
void render(int ID) {

}
void attacking(int attackerID, int attackeeID){
	/*
	hero attack value is first set to zero
	*/
	
}
void gr_Start(int &GrDriver, int&GrMode, int&ErrorCode) {
	//set the graphics driver
	GrDriver = VGA; //800x600 by monitor
	GrMode = VGAMAX;//set graphics mode
	initgraph(&GrDriver, &GrMode, "");//start graphics
									  //check for problems
	ErrorCode = graphresult();
	if (ErrorCode != grOk)
	{
		cout << "Error:" << ErrorCode;
	}
}
